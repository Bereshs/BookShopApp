package com.example.MyBookShopApp.struct.book;

import com.example.MyBookShopApp.struct.author.AuthorEntity;
import com.example.MyBookShopApp.struct.book.file.BookFileEntity;
import com.example.MyBookShopApp.struct.book.links.Book2AuthorEntity;
import com.example.MyBookShopApp.struct.book.links.BookRatingEntity;
import com.fasterxml.jackson.annotation.JsonGetter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.annotations.ApiOperation;
import org.hibernate.annotations.Type;
import org.hibernate.type.NumericBooleanType;
import org.hibernate.type.TrueFalseType;
import org.springframework.beans.factory.annotation.Value;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

@Entity
@Table(name = "book")
@ApiModel(description = "entity represented book")
public class BookEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automatically")
    private Integer id;

    @Column(columnDefinition = "TEXT NOT NULL")
    @ApiModelProperty("description book")
    private String description;
    @Column(columnDefinition = "SMALLINT NOT NULL DEFAULT 0")
    @ApiModelProperty("discount price")
    private int discount;

    @Column(columnDefinition = "VARCHAR(255)")
    @ApiModelProperty("path to image file")
    private String image;

    @Column(columnDefinition = "SMALLINT NOT NULL")
    @Type(type = "org.hibernate.type.NumericBooleanType")
    @ApiModelProperty("is_bestseller = 1 if book bestseller")
    private boolean isBestseller;

    @Column(columnDefinition = "INT NOT NULL")
    @ApiModelProperty("price of book")
    private int price;

    @Column(columnDefinition = "DATE NOT NULL")
    @ApiModelProperty("date of publication book")
    private LocalDateTime pubDate;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("mnemonic identificator of book")
    private String slug;
    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("title of book")
    private String title;

    @OneToMany(mappedBy = "book")
    private List<BookFileEntity> bookFileEntityList = new ArrayList<>();

    @OneToMany(mappedBy = "id")
    private List<Book2AuthorEntity> book2AuthorEntities;

    public String getAuthorName() {
        return book2AuthorEntities.get(0).getAuthor().getName();
    }
    public Integer getAuthorId(){return  book2AuthorEntities.get(0).getAuthor().getId();}
    public List<BookFileEntity> getBookFileEntityList() {
        return bookFileEntityList;
    }

    public void setBookFileEntityList(List<BookFileEntity> bookFileEntityList) {
        this.bookFileEntityList = bookFileEntityList;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public int getDiscount() {
        return discount;
    }

    public void setDiscount(int discount) {
        this.discount = discount;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public boolean isBestseller() {
        return isBestseller;
    }

    public void setBestseller(boolean bestseller) {
        isBestseller = bestseller;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    public LocalDateTime getPubDate() {
        return pubDate;
    }

    public void setPubDate(LocalDateTime pubDate) {
        this.pubDate = pubDate;
    }

    public String getSlug() {
        return slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @JsonGetter("discountPrice")
    public Integer discountPrice() {
        return getPrice() + getPrice() * (1 - getDiscount() / 100);
    }
}

